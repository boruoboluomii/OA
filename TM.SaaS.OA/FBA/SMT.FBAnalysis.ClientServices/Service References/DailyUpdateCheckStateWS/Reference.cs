//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34011
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace SMT.FBAnalysis.ClientServices.DailyUpdateCheckStateWS {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="DailyUpdateCheckStateWS.DailyUpdateCheckStateService")]
    public interface DailyUpdateCheckStateService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:DailyUpdateCheckStateService/UpdateCheckState", ReplyAction="urn:DailyUpdateCheckStateService/UpdateCheckStateResponse")]
        System.IAsyncResult BeginUpdateCheckState(string strEntityName, string EntityKeyName, string EntityKeyValue, string CheckState, System.AsyncCallback callback, object asyncState);
        
        int EndUpdateCheckState(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface DailyUpdateCheckStateServiceChannel : SMT.FBAnalysis.ClientServices.DailyUpdateCheckStateWS.DailyUpdateCheckStateService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateCheckStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateCheckStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DailyUpdateCheckStateServiceClient : System.ServiceModel.ClientBase<SMT.FBAnalysis.ClientServices.DailyUpdateCheckStateWS.DailyUpdateCheckStateService>, SMT.FBAnalysis.ClientServices.DailyUpdateCheckStateWS.DailyUpdateCheckStateService {
        
        private BeginOperationDelegate onBeginUpdateCheckStateDelegate;
        
        private EndOperationDelegate onEndUpdateCheckStateDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateCheckStateCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public DailyUpdateCheckStateServiceClient() {
        }
        
        public DailyUpdateCheckStateServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DailyUpdateCheckStateServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DailyUpdateCheckStateServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DailyUpdateCheckStateServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("无法设置 CookieContainer。请确保绑定包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<UpdateCheckStateCompletedEventArgs> UpdateCheckStateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.FBAnalysis.ClientServices.DailyUpdateCheckStateWS.DailyUpdateCheckStateService.BeginUpdateCheckState(string strEntityName, string EntityKeyName, string EntityKeyValue, string CheckState, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateCheckState(strEntityName, EntityKeyName, EntityKeyValue, CheckState, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int SMT.FBAnalysis.ClientServices.DailyUpdateCheckStateWS.DailyUpdateCheckStateService.EndUpdateCheckState(System.IAsyncResult result) {
            return base.Channel.EndUpdateCheckState(result);
        }
        
        private System.IAsyncResult OnBeginUpdateCheckState(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string strEntityName = ((string)(inValues[0]));
            string EntityKeyName = ((string)(inValues[1]));
            string EntityKeyValue = ((string)(inValues[2]));
            string CheckState = ((string)(inValues[3]));
            return ((SMT.FBAnalysis.ClientServices.DailyUpdateCheckStateWS.DailyUpdateCheckStateService)(this)).BeginUpdateCheckState(strEntityName, EntityKeyName, EntityKeyValue, CheckState, callback, asyncState);
        }
        
        private object[] OnEndUpdateCheckState(System.IAsyncResult result) {
            int retVal = ((SMT.FBAnalysis.ClientServices.DailyUpdateCheckStateWS.DailyUpdateCheckStateService)(this)).EndUpdateCheckState(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateCheckStateCompleted(object state) {
            if ((this.UpdateCheckStateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateCheckStateCompleted(this, new UpdateCheckStateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateCheckStateAsync(string strEntityName, string EntityKeyName, string EntityKeyValue, string CheckState) {
            this.UpdateCheckStateAsync(strEntityName, EntityKeyName, EntityKeyValue, CheckState, null);
        }
        
        public void UpdateCheckStateAsync(string strEntityName, string EntityKeyName, string EntityKeyValue, string CheckState, object userState) {
            if ((this.onBeginUpdateCheckStateDelegate == null)) {
                this.onBeginUpdateCheckStateDelegate = new BeginOperationDelegate(this.OnBeginUpdateCheckState);
            }
            if ((this.onEndUpdateCheckStateDelegate == null)) {
                this.onEndUpdateCheckStateDelegate = new EndOperationDelegate(this.OnEndUpdateCheckState);
            }
            if ((this.onUpdateCheckStateCompletedDelegate == null)) {
                this.onUpdateCheckStateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateCheckStateCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateCheckStateDelegate, new object[] {
                        strEntityName,
                        EntityKeyName,
                        EntityKeyValue,
                        CheckState}, this.onEndUpdateCheckStateDelegate, this.onUpdateCheckStateCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SMT.FBAnalysis.ClientServices.DailyUpdateCheckStateWS.DailyUpdateCheckStateService CreateChannel() {
            return new DailyUpdateCheckStateServiceClientChannel(this);
        }
        
        private class DailyUpdateCheckStateServiceClientChannel : ChannelBase<SMT.FBAnalysis.ClientServices.DailyUpdateCheckStateWS.DailyUpdateCheckStateService>, SMT.FBAnalysis.ClientServices.DailyUpdateCheckStateWS.DailyUpdateCheckStateService {
            
            public DailyUpdateCheckStateServiceClientChannel(System.ServiceModel.ClientBase<SMT.FBAnalysis.ClientServices.DailyUpdateCheckStateWS.DailyUpdateCheckStateService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginUpdateCheckState(string strEntityName, string EntityKeyName, string EntityKeyValue, string CheckState, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = strEntityName;
                _args[1] = EntityKeyName;
                _args[2] = EntityKeyValue;
                _args[3] = CheckState;
                System.IAsyncResult _result = base.BeginInvoke("UpdateCheckState", _args, callback, asyncState);
                return _result;
            }
            
            public int EndUpdateCheckState(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("UpdateCheckState", _args, result)));
                return _result;
            }
        }
    }
}
