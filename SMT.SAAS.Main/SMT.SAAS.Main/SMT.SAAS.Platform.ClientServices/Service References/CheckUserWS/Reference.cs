//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34011
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace SMT.SAAS.Platform.ClientServices.CheckUserWS {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="V_UserLogin", Namespace="http://schemas.datacontract.org/2004/07/SMT.SaaS.Permission.DAL")]
    public partial class V_UserLogin : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string EMPLOYEEIDField;
        
        private string ISMANAGERField;
        
        private string LOGINRECORDIDField;
        
        private string SYSUSERIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EMPLOYEEID {
            get {
                return this.EMPLOYEEIDField;
            }
            set {
                if ((object.ReferenceEquals(this.EMPLOYEEIDField, value) != true)) {
                    this.EMPLOYEEIDField = value;
                    this.RaisePropertyChanged("EMPLOYEEID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ISMANAGER {
            get {
                return this.ISMANAGERField;
            }
            set {
                if ((object.ReferenceEquals(this.ISMANAGERField, value) != true)) {
                    this.ISMANAGERField = value;
                    this.RaisePropertyChanged("ISMANAGER");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LOGINRECORDID {
            get {
                return this.LOGINRECORDIDField;
            }
            set {
                if ((object.ReferenceEquals(this.LOGINRECORDIDField, value) != true)) {
                    this.LOGINRECORDIDField = value;
                    this.RaisePropertyChanged("LOGINRECORDID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SYSUSERID {
            get {
                return this.SYSUSERIDField;
            }
            set {
                if ((object.ReferenceEquals(this.SYSUSERIDField, value) != true)) {
                    this.SYSUSERIDField = value;
                    this.RaisePropertyChanged("SYSUSERID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="CheckUserWS.MainUIServices")]
    public interface MainUIServices {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:MainUIServices/DoWork", ReplyAction="urn:MainUIServices/DoWorkResponse")]
        System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState);
        
        void EndDoWork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:MainUIServices/UserLogin", ReplyAction="urn:MainUIServices/UserLoginResponse")]
        System.IAsyncResult BeginUserLogin(string userName, string Pwd, System.AsyncCallback callback, object asyncState);
        
        SMT.SAAS.Platform.ClientServices.CheckUserWS.V_UserLogin EndUserLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:MainUIServices/GetSystemTypeByUserID", ReplyAction="urn:MainUIServices/GetSystemTypeByUserIDResponse")]
        System.IAsyncResult BeginGetSystemTypeByUserID(string UserID, ref string StrResult, System.AsyncCallback callback, object asyncState);
        
        string EndGetSystemTypeByUserID(ref string StrResult, System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface MainUIServicesChannel : SMT.SAAS.Platform.ClientServices.CheckUserWS.MainUIServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UserLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SMT.SAAS.Platform.ClientServices.CheckUserWS.V_UserLogin Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SMT.SAAS.Platform.ClientServices.CheckUserWS.V_UserLogin)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSystemTypeByUserIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSystemTypeByUserIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string StrResult {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MainUIServicesClient : System.ServiceModel.ClientBase<SMT.SAAS.Platform.ClientServices.CheckUserWS.MainUIServices>, SMT.SAAS.Platform.ClientServices.CheckUserWS.MainUIServices {
        
        private BeginOperationDelegate onBeginDoWorkDelegate;
        
        private EndOperationDelegate onEndDoWorkDelegate;
        
        private System.Threading.SendOrPostCallback onDoWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginUserLoginDelegate;
        
        private EndOperationDelegate onEndUserLoginDelegate;
        
        private System.Threading.SendOrPostCallback onUserLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSystemTypeByUserIDDelegate;
        
        private EndOperationDelegate onEndGetSystemTypeByUserIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetSystemTypeByUserIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public MainUIServicesClient() {
        }
        
        public MainUIServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MainUIServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MainUIServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MainUIServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("无法设置 CookieContainer。请确保绑定包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DoWorkCompleted;
        
        public event System.EventHandler<UserLoginCompletedEventArgs> UserLoginCompleted;
        
        public event System.EventHandler<GetSystemTypeByUserIDCompletedEventArgs> GetSystemTypeByUserIDCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.SAAS.Platform.ClientServices.CheckUserWS.MainUIServices.BeginDoWork(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDoWork(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SMT.SAAS.Platform.ClientServices.CheckUserWS.MainUIServices.EndDoWork(System.IAsyncResult result) {
            base.Channel.EndDoWork(result);
        }
        
        private System.IAsyncResult OnBeginDoWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SMT.SAAS.Platform.ClientServices.CheckUserWS.MainUIServices)(this)).BeginDoWork(callback, asyncState);
        }
        
        private object[] OnEndDoWork(System.IAsyncResult result) {
            ((SMT.SAAS.Platform.ClientServices.CheckUserWS.MainUIServices)(this)).EndDoWork(result);
            return null;
        }
        
        private void OnDoWorkCompleted(object state) {
            if ((this.DoWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DoWorkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DoWorkAsync() {
            this.DoWorkAsync(null);
        }
        
        public void DoWorkAsync(object userState) {
            if ((this.onBeginDoWorkDelegate == null)) {
                this.onBeginDoWorkDelegate = new BeginOperationDelegate(this.OnBeginDoWork);
            }
            if ((this.onEndDoWorkDelegate == null)) {
                this.onEndDoWorkDelegate = new EndOperationDelegate(this.OnEndDoWork);
            }
            if ((this.onDoWorkCompletedDelegate == null)) {
                this.onDoWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDoWorkCompleted);
            }
            base.InvokeAsync(this.onBeginDoWorkDelegate, null, this.onEndDoWorkDelegate, this.onDoWorkCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.SAAS.Platform.ClientServices.CheckUserWS.MainUIServices.BeginUserLogin(string userName, string Pwd, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUserLogin(userName, Pwd, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SMT.SAAS.Platform.ClientServices.CheckUserWS.V_UserLogin SMT.SAAS.Platform.ClientServices.CheckUserWS.MainUIServices.EndUserLogin(System.IAsyncResult result) {
            return base.Channel.EndUserLogin(result);
        }
        
        private System.IAsyncResult OnBeginUserLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            string Pwd = ((string)(inValues[1]));
            return ((SMT.SAAS.Platform.ClientServices.CheckUserWS.MainUIServices)(this)).BeginUserLogin(userName, Pwd, callback, asyncState);
        }
        
        private object[] OnEndUserLogin(System.IAsyncResult result) {
            SMT.SAAS.Platform.ClientServices.CheckUserWS.V_UserLogin retVal = ((SMT.SAAS.Platform.ClientServices.CheckUserWS.MainUIServices)(this)).EndUserLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUserLoginCompleted(object state) {
            if ((this.UserLoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UserLoginCompleted(this, new UserLoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UserLoginAsync(string userName, string Pwd) {
            this.UserLoginAsync(userName, Pwd, null);
        }
        
        public void UserLoginAsync(string userName, string Pwd, object userState) {
            if ((this.onBeginUserLoginDelegate == null)) {
                this.onBeginUserLoginDelegate = new BeginOperationDelegate(this.OnBeginUserLogin);
            }
            if ((this.onEndUserLoginDelegate == null)) {
                this.onEndUserLoginDelegate = new EndOperationDelegate(this.OnEndUserLogin);
            }
            if ((this.onUserLoginCompletedDelegate == null)) {
                this.onUserLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUserLoginCompleted);
            }
            base.InvokeAsync(this.onBeginUserLoginDelegate, new object[] {
                        userName,
                        Pwd}, this.onEndUserLoginDelegate, this.onUserLoginCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.SAAS.Platform.ClientServices.CheckUserWS.MainUIServices.BeginGetSystemTypeByUserID(string UserID, ref string StrResult, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSystemTypeByUserID(UserID, ref StrResult, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string SMT.SAAS.Platform.ClientServices.CheckUserWS.MainUIServices.EndGetSystemTypeByUserID(ref string StrResult, System.IAsyncResult result) {
            return base.Channel.EndGetSystemTypeByUserID(ref StrResult, result);
        }
        
        private System.IAsyncResult OnBeginGetSystemTypeByUserID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string UserID = ((string)(inValues[0]));
            string StrResult = ((string)(inValues[1]));
            return ((SMT.SAAS.Platform.ClientServices.CheckUserWS.MainUIServices)(this)).BeginGetSystemTypeByUserID(UserID, ref StrResult, callback, asyncState);
        }
        
        private object[] OnEndGetSystemTypeByUserID(System.IAsyncResult result) {
            string StrResult = this.GetDefaultValueForInitialization<string>();
            string retVal = ((SMT.SAAS.Platform.ClientServices.CheckUserWS.MainUIServices)(this)).EndGetSystemTypeByUserID(ref StrResult, result);
            return new object[] {
                    StrResult,
                    retVal};
        }
        
        private void OnGetSystemTypeByUserIDCompleted(object state) {
            if ((this.GetSystemTypeByUserIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSystemTypeByUserIDCompleted(this, new GetSystemTypeByUserIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSystemTypeByUserIDAsync(string UserID, string StrResult) {
            this.GetSystemTypeByUserIDAsync(UserID, StrResult, null);
        }
        
        public void GetSystemTypeByUserIDAsync(string UserID, string StrResult, object userState) {
            if ((this.onBeginGetSystemTypeByUserIDDelegate == null)) {
                this.onBeginGetSystemTypeByUserIDDelegate = new BeginOperationDelegate(this.OnBeginGetSystemTypeByUserID);
            }
            if ((this.onEndGetSystemTypeByUserIDDelegate == null)) {
                this.onEndGetSystemTypeByUserIDDelegate = new EndOperationDelegate(this.OnEndGetSystemTypeByUserID);
            }
            if ((this.onGetSystemTypeByUserIDCompletedDelegate == null)) {
                this.onGetSystemTypeByUserIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSystemTypeByUserIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetSystemTypeByUserIDDelegate, new object[] {
                        UserID,
                        StrResult}, this.onEndGetSystemTypeByUserIDDelegate, this.onGetSystemTypeByUserIDCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SMT.SAAS.Platform.ClientServices.CheckUserWS.MainUIServices CreateChannel() {
            return new MainUIServicesClientChannel(this);
        }
        
        private class MainUIServicesClientChannel : ChannelBase<SMT.SAAS.Platform.ClientServices.CheckUserWS.MainUIServices>, SMT.SAAS.Platform.ClientServices.CheckUserWS.MainUIServices {
            
            public MainUIServicesClientChannel(System.ServiceModel.ClientBase<SMT.SAAS.Platform.ClientServices.CheckUserWS.MainUIServices> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("DoWork", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDoWork(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DoWork", _args, result);
            }
            
            public System.IAsyncResult BeginUserLogin(string userName, string Pwd, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userName;
                _args[1] = Pwd;
                System.IAsyncResult _result = base.BeginInvoke("UserLogin", _args, callback, asyncState);
                return _result;
            }
            
            public SMT.SAAS.Platform.ClientServices.CheckUserWS.V_UserLogin EndUserLogin(System.IAsyncResult result) {
                object[] _args = new object[0];
                SMT.SAAS.Platform.ClientServices.CheckUserWS.V_UserLogin _result = ((SMT.SAAS.Platform.ClientServices.CheckUserWS.V_UserLogin)(base.EndInvoke("UserLogin", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetSystemTypeByUserID(string UserID, ref string StrResult, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = UserID;
                _args[1] = StrResult;
                System.IAsyncResult _result = base.BeginInvoke("GetSystemTypeByUserID", _args, callback, asyncState);
                StrResult = ((string)(_args[1]));
                return _result;
            }
            
            public string EndGetSystemTypeByUserID(ref string StrResult, System.IAsyncResult result) {
                object[] _args = new object[1];
                _args[0] = StrResult;
                string _result = ((string)(base.EndInvoke("GetSystemTypeByUserID", _args, result)));
                StrResult = ((string)(_args[0]));
                return _result;
            }
        }
    }
}
